from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import numpy as np
import matplotlib.pyplot as plt

# Generate a synthetic dataset with more points and additional features
np.random.seed(42)
X = np.random.rand(200, 2) * 10 # 200 samples, 2 features
y = np.where(X[:, 0] + X[:, 1] > 10, 1, 0) # Simple rule for binary classification

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create the SVM model
svm = SVC(kernel='linear')
svm.fit(X_train, y_train)

# Predict
y_train_pred = svm.predict(X_train)
y_test_pred = svm.predict(X_test)

# Evaluate the model
print("Training Accuracy:", accuracy_score(y_train, y_train_pred))
print("Testing Accuracy:", accuracy_score(y_test, y_test_pred))

print("\nConfusion Matrix (Training):")
print(confusion_matrix(y_train, y_train_pred))

print("\nClassification Report (Training):")
print(classification_report(y_train, y_train_pred))

print("\nConfusion Matrix (Testing):")
print(confusion_matrix(y_test, y_test_pred))

print("\nClassification Report (Testing):")
print(classification_report(y_test, y_test_pred))

# Visualize decision boundaries (only works for 2D features)
def plot_decision_boundaries(X, y, model, title):
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1), np.arange(y_min, y_max, 0.1))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    plt.figure(figsize=(10, 5))
    plt.contourf(xx, yy, Z, alpha=0.4)
    plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k')
    plt.title(title)
    plt.xlabel('Feature 1')
    plt.ylabel('Feature 2')
    plt.show()

plot_decision_boundaries(X_train, y_train, svm, 'SVM Decision Boundaries (Training)')
plot_decision_boundaries(X_test, y_test, svm, 'SVM Decision Boundaries (Testing)')
